# %% load libraries
from SVM import SupportVectorMachine
from data import IrisDataset, build_train_test_dataset, DataUnit

# %% sample dataset
dataset = IrisDataset.load_iris_file(with_name=True)

# %% peek dataset
print(dataset.head())

# %% binary classification
model = SupportVectorMachine(C=10, kernel_name="rbf", kernel_arg={"sigma": 2})

# %% load dataset
POSITIVE_CLASS = "Setosa"
NEGATIVE_CLASS = "Virginica"

pre_precess_data = build_train_test_dataset(
    df_in=dataset,
    train_size=IrisDataset.TRAIN_DATA_SIZE,
    positive_class=POSITIVE_CLASS,
    negative_class=NEGATIVE_CLASS,
)

print(pre_precess_data)


# %% Build DataUnit
data_unit = DataUnit.build_from_dict(
    data_dict=pre_precess_data,
    positive_class=POSITIVE_CLASS,
    negative_class=NEGATIVE_CLASS,
    label="Label",
)
print(data_unit)
# %% test model
from utils import test_run, TestResult

output: list[TestResult] = test_run(
    data_unit=data_unit,
    kernel_name="rbf",
    kernel_arg={"sigma": [5, 1, 0.5, 0.1, 0.05]},
    C_list=[10],
    model_type=SupportVectorMachine,
)
# %% show result
print(output)

# train model
# model.train(x=data_unit.train_x, y=data_unit.train_y)

## example output
# [TestResult(model={'kernel': {'name': 'rbf', 'arg': {'sigma': 5}}, 'support vector num': 50, 'C': 10, 'b': '0.0892'}, acc=np.float64(1.0), bias_='0.0892', alpha=array([1.52889441e-09, 2.16329372e-09, 1.52972727e-09, 2.51224808e-09,
#        1.44133469e-09, 3.04241133e-09, 1.78394943e-09, 1.94848133e-09,
#        2.42898455e-09, 2.17918429e-09, 1.67552481e-09, 2.42127255e-09,
#        1.90641809e-09, 1.20766140e-09, 1.04807859e-09, 1.55448925e-09,
#        1.33370747e-09, 1.68985384e-09, 3.09102652e-09, 1.70008151e-09,
#        3.46783970e-09, 2.03572500e-09, 8.95192298e-10, 1.50208320e+00,
#        4.11109540e+00, 6.99582541e-10, 1.54069956e-09, 9.25656478e-10,
#        1.08037325e-09, 8.17645260e-10, 7.41949970e-10, 5.61317861e+00,
#        8.34818878e-10, 8.63488030e-10, 9.13440543e-10, 2.81076080e-09,
#        1.33499014e-09, 1.21035729e-09, 1.45112907e-09, 1.14818778e-09,
#        1.34088190e-09, 1.34430835e-09, 9.60081026e-10, 6.09706671e-10,
#        2.17613355e-09, 1.01443093e-09, 2.10369184e-09, 7.23805220e-10,
#        3.51676486e-09, 1.10689278e-09])), TestResult(model={'kernel': {'name': 'rbf', 'arg': {'sigma': 1}}, 'support vector num': 50, 'C': 10, 'b': '-0.2754'}, acc=np.float64(1.0), bias_='-0.2754', alpha=array([1.72793476e-11, 1.27544179e-10, 2.40944337e-11, 4.44001119e-11,
#        1.52735676e-11, 3.45437227e-11, 2.24215398e-11, 1.94502578e-11,
#        9.68261324e-03, 5.44834624e-11, 2.28807051e-11, 2.21170622e-11,
#        7.80747903e-11, 9.04910386e-01, 2.61602761e-01, 7.97134959e-01,
#        2.36745600e-11, 1.80687229e-11, 6.72573065e-10, 1.68097735e-11,
#        9.81945862e-10, 1.85170512e-11, 3.33715201e-11, 2.00109648e-09,
#        3.23357264e-01, 3.01614403e-01, 3.61011884e-11, 3.01773556e-11,
#        3.67001381e-11, 2.90740530e-11, 3.04380925e-11, 5.58182093e-01,
#        6.28638137e-11, 7.29069598e-02, 7.85134958e-11, 2.18919755e-01,
#        4.07708226e-11, 4.37033076e-11, 5.00694774e-11, 5.68879545e-03,
#        1.37385440e-10, 3.73371725e-11, 4.21533000e-01, 4.41962928e-01,
#        2.75880053e-01, 3.84332802e-11, 5.82835182e-11, 8.07282610e-11,
#        9.48899182e-11, 3.39530914e-11])), TestResult(model={'kernel': {'name': 'rbf', 'arg': {'sigma': 0.5}}, 'support vector num': 50, 'C': 10, 'b': '-0.3835'}, acc=np.float64(1.0), bias_='-0.3835', alpha=array([2.02859518e-11, 4.16543961e-02, 1.27356466e-11, 1.98436913e-11,
#        2.17394395e-11, 3.15648234e-10, 1.54166056e-11, 1.22731713e-11,
#        4.21601793e-01, 5.96081453e-11, 3.08523787e-11, 1.31493175e-11,
#        1.69019993e-10, 5.85402674e-01, 6.11019659e-01, 8.38718124e-01,
#        1.82380622e-10, 2.02409349e-11, 2.21806973e-01, 9.65087196e-11,
#        4.02831174e-01, 5.65112268e-11, 7.71221060e-01, 2.83126026e-01,
#        5.93790423e-01, 4.66233606e-01, 8.78409222e-11, 1.44634212e-09,
#        3.99977072e-09, 6.24081886e-11, 1.51570477e-10, 5.99881681e-01,
#        3.52758054e-01, 4.27802765e-01, 3.77211195e-01, 3.95645018e-01,
#        5.90614754e-11, 7.04625259e-10, 2.09367612e-10, 3.82354332e-01,
#        1.30266425e-10, 3.06125707e-10, 5.13011491e-01, 5.55394592e-01,
#        5.04809940e-01, 3.42640439e-02, 1.22050679e-01, 3.92464550e-07,
#        3.97545056e-02, 3.40280012e-10])), TestResult(model={'kernel': {'name': 'rbf', 'arg': {'sigma': 0.1}}, 'support vector num': 50, 'C': 10, 'b': '-0.0783'}, acc=np.float64(0.82), bias_='-0.0783', alpha=array([0.24275456, 0.66961285, 0.96598989, 0.98716469, 0.73821993,
#        1.07031686, 1.03398999, 0.79441948, 1.06450343, 0.77622194,
#        1.06582783, 0.98354191, 0.59959074, 1.07564073, 1.07826584,
#        1.07828401, 1.07468466, 0.61560098, 1.07331661, 0.77490337,
#        1.07651386, 0.73476995, 1.07825362, 1.07755794, 1.06730926,
#        0.92171356, 0.88865727, 0.92140623, 0.87752019, 0.92111938,
#        0.89470272, 0.92171564, 0.92171461, 0.92171562, 0.92171564,
#        0.92087006, 0.92063105, 0.91933584, 0.89115179, 0.92170681,
#        0.92087466, 0.87739265, 0.92171564, 0.92153336, 0.92171564,
#        0.90989695, 0.91208032, 0.89451045, 0.92160175, 0.91025709])), TestResult(model={'kernel': {'name': 'rbf', 'arg': {'sigma': 0.05}}, 'support vector num': 50, 'C': 10, 'b': '-0.0073'}, acc=np.float64(0.74), bias_='-0.0073', alpha=array([0.86659735, 0.98671705, 1.00726618, 1.00726702, 0.98915536,
#        1.00727404, 1.00727319, 1.00473771, 1.00727403, 1.00238239,
#        1.00727404, 1.0072284 , 0.98671536, 1.00727404, 1.00727404,
#        1.00727404, 1.00727404, 0.88719784, 1.00727404, 0.98915629,
#        1.00727404, 0.98915073, 1.00727404, 1.00727404, 1.00727403,
#        0.99272596, 0.99272513, 0.99272596, 0.99271986, 0.99272596,
#        0.99272513, 0.99272596, 0.99272596, 0.99272596, 0.99272596,
#        0.99272596, 0.99272596, 0.99272596, 0.99272513, 0.99272596,
#        0.99272596, 0.99271986, 0.99272596, 0.99272596, 0.99272596,
#        0.99272594, 0.99272595, 0.99272513, 0.99272596, 0.99272594]))]

# %% train model
model.train(x=data_unit.train_x, y=data_unit.train_y)
print(model)

# %% save model
model.save("dummy_model")
# %% load model
model = SupportVectorMachine.load_from("dummy_model")
print(model)

# %%
